-------- Excel VBA：フォルダ内のファイルリストを作成｜サイズや日時も ------------
Option Explicit

'Excel VBAでフォルダ内のファイルリストを作成
Private Sub ExGetFileList(strPath As String, lRow As Long)
    Dim tSfo As Object
    Dim tGf As Object
    Dim tFi As Object
    Dim tSub As Object
    
    Set tSfo = CreateObject("Scripting.FileSystemObject")
    Set tGf = tSfo.GetFolder(strPath)
    For Each tFi In tGf.Files
        'ファイル名
        Cells(lRow, 2) = tFi.Name
        'パス内に含まれるファイルの拡張子を除いたものを取得
        Cells(lRow, 3) = tSfo.GetBaseName(tFi.Path)
        'ファイルの拡張子
        Cells(lRow, 4) = tSfo.GetExtensionName(tFi.Path)
        'フォルダ名
        Cells(lRow, 5) = tFi.ParentFolder.Path
        'ファイルサイズ KByte
        Cells(lRow, 6) = Int(tFi.Size / 1024)
        '作成された日付・時刻
        Cells(lRow, 7) = tFi.DateCreated
        'ファイルの最終更新された日付・時刻
        Cells(lRow, 8) = tFi.DateLastModified
        'ファイルの最終アクセスの日付・時刻
        Cells(lRow, 9) = tFi.DateLastAccessed
        lRow = lRow + 1
    Next
  
    For Each tSub In tGf.SubFolders
        ExGetFileList tSub.Path, lRow
    Next
End Sub

Private Sub CommandButton1_Click()
    ExGetFileList "e:\mydir", 4
End Sub
-------- Dir関数でサブフォルダも含むファイル一覧を取得するVBA ------------
Function GetFileList(ByVal argDir As String) As String()
  Dim i As Long
  Dim aryDir() As String
  Dim aryFile() As String
  Dim strName As String

  ReDim aryDir(i)
  aryDir(i) = argDir '引数のフォルダを配列の先頭に入れる
  
  'まずは、指定フォルダ以下の全サブフォルダを取得し、配列aryDirに入れます。
  i = 0
  Do
    strName = Dir(aryDir(i) & "\", vbDirectory)
    Do While strName <> ""
      If GetAttr(aryDir(i) & "\" & strName) And vbDirectory Then
        If strName <> "." And strName <> ".." Then
          ReDim Preserve aryDir(UBound(aryDir) + 1)
          aryDir(UBound(aryDir)) = aryDir(i) & "\" & strName
        End If
      End If
      strName = Dir()
    Loop
    i = i + 1
    If i > UBound(aryDir) Then Exit Do
  Loop
  
  '配列aryDirの全フォルダについて、ファイルを取得し、配列aryFileに入れます。
  ReDim aryFile(0)
  For i = 0 To UBound(aryDir)
    strName = Dir(aryDir(i) & "\", vbNormal + vbHidden + vbReadOnly + vbSystem)
    Do While strName <> ""
      If aryFile(0) <> "" Then
        ReDim Preserve aryFile(UBound(aryFile) + 1)
      End If
      aryFile(UBound(aryFile)) = aryDir(i) & "\" & strName
      '実行結果が分かりやすいように、テスト的にセルに書き出す場合
      'Cells(UBound(aryFile) + 1, 1) = aryFile(UBound(aryFile))
      strName = Dir()
    Loop
  Next
  
  GetFileList = aryFile
End Function
-------- 全シートのカーソルをA1に移動するマクロ --
Sub A1move()
    Dim sht                     As Worksheet            '// 処理中のワークシート
    Dim shtVisible                                      '// 表示可能なワークシート
    Dim iRow, iCol                                      '// 縦、横座標
    Dim sHiddenSheet                                    '// 非表示シート名
    Dim oFilterStatus           As AutoFilter           '// オートフィルタ状態
    Dim oRangeFilter            As Range                '// オートフィルタ設定

    For Each sht In Worksheets
        If (IsEmpty(shtVisible) = True) And (sht.Visible = xlSheetVisible) Then
            Set shtVisible = sht
        End If

        '// シートが表示されている場合
        If sht.Visible = xlSheetVisible Then
            Call A1(sht)
        '// シートが非表示の場合
        Else
            sHiddenSheet = sHiddenSheet & "、" & sht.Name
            sht.Visible = xlSheetVisible
            Call A1(sht)
            sht.Visible = xlSheetHidden
        End If
    Next

    shtVisible.Select

    If (sHiddenSheet <> "") Then
        MsgBox sHiddenSheet, vbOKOnly, "非表示シートあり"
    End If
End Sub

Sub A1(ByVal sht As Worksheet)
        sht.Select

        '// ウインドウ枠の固定がされている場合
        If ActiveWindow.FreezePanes = True Then
            iRow = ActiveWindow.SplitRow + 1
            iCol = ActiveWindow.SplitColumn + 1
            Cells(iRow + 1, iCol + 1).Activate
        End If

        Set oFilterStatus = sht.AutoFilter
        '// オートフィルタが設定されている場合
        If Not oFilterStatus Is Nothing Then
            '// フィルタが掛かっている場合
            If oFilterStatus.FilterMode = True Then
                '// フィルタが掛かっている行の先頭を選択
                Set oRangeFilter = Range("A1").CurrentRegion
                Set oRangeFilter = Application.Intersect(oRangeFilter, oRangeFilter.Offset(1, 0))
                Set oRangeFilter = oRangeFilter.SpecialCells(xlCellTypeVisible)
                Range("A" & CStr(oRangeFilter.Row)).Select
            End If
        End If

        sht.Range("A1").Select
        ActiveWindow.Zoom = 100

        ActiveCell.Activate         ' Excel97対策
        ' スクロール列の設定
        ActiveWindow.ScrollColumn = 1
        ' スクロール行の設定
        ActiveWindow.ScrollRow = 1

End Sub
----------
/*
 * WARNING: do not edit!
 * Generated by configdata.pm from Configurations/common0.tmpl, Configurations/unix-Makefile.tmpl
 * via Makefile.in
 *
 * Copyright 2016-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#ifndef OPENSSL_CONFIGURATION_H
# define OPENSSL_CONFIGURATION_H
# pragma once

# ifdef  __cplusplus
extern "C" {
# endif

# ifdef OPENSSL_ALGORITHM_DEFINES
#  error OPENSSL_ALGORITHM_DEFINES no longer supported
# endif

/*
 * OpenSSL was configured with the following options:
 */

# define OPENSSL_CONFIGURED_API 30100
# ifndef OPENSSL_RAND_SEED_OS
#  define OPENSSL_RAND_SEED_OS
# endif
# ifndef OPENSSL_THREADS
#  define OPENSSL_THREADS
# endif
# ifndef OPENSSL_NO_ACVP_TESTS
#  define OPENSSL_NO_ACVP_TESTS
# endif
# ifndef OPENSSL_NO_ASAN
#  define OPENSSL_NO_ASAN
# endif
# ifndef OPENSSL_NO_CRYPTO_MDEBUG
#  define OPENSSL_NO_CRYPTO_MDEBUG
# endif
# ifndef OPENSSL_NO_CRYPTO_MDEBUG_BACKTRACE
#  define OPENSSL_NO_CRYPTO_MDEBUG_BACKTRACE
# endif
# ifndef OPENSSL_NO_DEVCRYPTOENG
#  define OPENSSL_NO_DEVCRYPTOENG
# endif
# ifndef OPENSSL_NO_EC_NISTP_64_GCC_128
#  define OPENSSL_NO_EC_NISTP_64_GCC_128
# endif
# ifndef OPENSSL_NO_EGD
#  define OPENSSL_NO_EGD
# endif
# ifndef OPENSSL_NO_EXTERNAL_TESTS
#  define OPENSSL_NO_EXTERNAL_TESTS
# endif
# ifndef OPENSSL_NO_FIPS_SECURITYCHECKS
#  define OPENSSL_NO_FIPS_SECURITYCHECKS
# endif
# ifndef OPENSSL_NO_FUZZ_AFL
#  define OPENSSL_NO_FUZZ_AFL
# endif
# ifndef OPENSSL_NO_FUZZ_LIBFUZZER
#  define OPENSSL_NO_FUZZ_LIBFUZZER
# endif
# ifndef OPENSSL_NO_KTLS
#  define OPENSSL_NO_KTLS
# endif
# ifndef OPENSSL_NO_MD2
#  define OPENSSL_NO_MD2
# endif
# ifndef OPENSSL_NO_MSAN
#  define OPENSSL_NO_MSAN
# endif
# ifndef OPENSSL_NO_QUIC
#  define OPENSSL_NO_QUIC
# endif
# ifndef OPENSSL_NO_RC5
#  define OPENSSL_NO_RC5
# endif
# ifndef OPENSSL_NO_SCTP
#  define OPENSSL_NO_SCTP
# endif
# ifndef OPENSSL_NO_SSL3
#  define OPENSSL_NO_SSL3
# endif
# ifndef OPENSSL_NO_SSL3_METHOD
#  define OPENSSL_NO_SSL3_METHOD
# endif
# ifndef OPENSSL_NO_TFO
#  define OPENSSL_NO_TFO
# endif
# ifndef OPENSSL_NO_TRACE
#  define OPENSSL_NO_TRACE
# endif
# ifndef OPENSSL_NO_UBSAN
#  define OPENSSL_NO_UBSAN
# endif
# ifndef OPENSSL_NO_UNIT_TEST
#  define OPENSSL_NO_UNIT_TEST
# endif
# ifndef OPENSSL_NO_UPLINK
#  define OPENSSL_NO_UPLINK
# endif
# ifndef OPENSSL_NO_WEAK_SSL_CIPHERS
#  define OPENSSL_NO_WEAK_SSL_CIPHERS
# endif
# ifndef OPENSSL_NO_STATIC_ENGINE
#  define OPENSSL_NO_STATIC_ENGINE
# endif


/* Generate 80386 code? */
# undef I386_ONLY

/*
 * The following are cipher-specific, but are part of the public API.
 */
# if !defined(OPENSSL_SYS_UEFI)
#  undef BN_LLONG
/* Only one for the following should be defined */
#  define SIXTY_FOUR_BIT_LONG
#  undef SIXTY_FOUR_BIT
#  undef THIRTY_TWO_BIT
# endif

# define RC4_INT unsigned int

# ifdef  __cplusplus
}
# endif

#endif                          /* OPENSSL_CONFIGURATION_H */
-----------------
UseCase仕様書
ユースケース仕様書の項目	システムテスト仕様書の項目
ユースケース名	テスト対象サービス
定義	テスト目的
アクター	ユーザモデル
前提条件	テスト環境の前提条件
	前提条件がクリアされない場合、このユースケースにはやってこない
事前条件	テストケースを実施する環境条件・アプリケーションレベルの事前条件
	事前条件がクリアされない場合、基本フローは通らない
基本フロー	正常系テストケース
代替えフロー	異常系テストケース
事後条件	期待する結果
特記事項	設計実装上の制約
未決定事項、仮決定事項	異常系テストケースのバリエーション
----
新卒未経験エンジニアの後輩ができる先輩方に読んでほしい４つのこと - Qiita	https://qiita.com/_mi/items/9a9eb3307222376b5477
質問は恥ではないし役に立つ	https://qiita.com/seki_uk/items/4001423b3cd3db0dada7
技術系メーリングリストで質問するときのパターン・ランゲージ	https://www.hyuki.com/writing/techask.html
新人、優秀すぎて草 - Qiita	https://qiita.com/ueaaoe/items/67c99b86ac8eecb98bbe
----
【VBA】ExcelVBAで実現するエビデンスツール
https://qiita.com/Kit-i/items/e4c732c9e389dc6a860b

Option Explicit
'キャプチャ収集状態ならTrue
Private isLogging As Boolean

'キャプチャを貼り付けるブック名を保持する
Private fileName As String

'############################
'#キャプチャ取得プロシージャ
'############################
Private Sub Capture()
    On Error GoTo errorHandler
 
 'クリップボードに画像が格納されていたら貼り付ける
    If Application.ClipboardFormats(1) = xlClipboardFormatBitmap Then
       Dim rows As Integer: rows = 63 '行数
    
       'キャプチャを貼り付ける
       Workbooks(fileName).Activate 'マクロ実行時にfileName変数にアクティブbookの名前をいれる。
       
       '選択しているセルを基準セルとして取得する
       Dim baseCell As Variant
       Set baseCell = Selection
       
       'クリップボードのデータを貼付け、行数に合わせて縮小する
       baseCell.Offset(1, 1).Select
       ActiveSheet.Paste
       With Selection.ShapeRange
           .LockAspectRatio = msoTrue
           .Height = .Height * 0.7
       End With
       
       '次の画像を貼るために基準セルを移動し、クリップボードに現在のセルの値をコピーする(クリップボードの中身をBitmapでなくすため)
       With baseCell.Offset(rows + 1, 0)
           .Select
           .Copy
       End With
       
       '切り取り・コピーモードを解除する
       Application.CutCopyMode = False
       
       'Windows通知処理(外部PWスクリプトの実行)
        Dim PWobj
        Set PWobj = CreateObject("WScript.Shell")
        PWobj.Run ("Powershell -ExecutionPolicy RemoteSigned -Command <通知用Powershellスクリプト>"), 0
       
    End If
    
    '1秒間隔で再実行するようにタイマーをセットする
    Application.OnTime Now + TimeValue("00:00:01"), "Capture", , isLogging
    
    Exit Sub
    
errorHandler:
    isLogging = False
    
End Sub

'########################
'#キャプチャを開始する
'########################
Sub StartCapture()
    MsgBox "キャプチャの取得を開始します。終了時にはEscキーを押下してください。"
    
    'Escキーで停止できるようにしておく
    Application.OnKey "{ESC}", "StopCapture"
    
    'キャプチャを貼り付けるブック名を取得する
    fileName = ActiveWorkbook.Name
    
    'キャプチャ取得状態を設定する
    isLogging = True
    
    'キャプチャ実行中であることを示すためシート見出しを赤く塗りつぶす
    ActiveSheet.Tab.Color = RGB(255, 0, 0)
    
    'キャプチャの取得を開始する
    Capture
    
End Sub

'########################
'#キャプチャを終了する
'########################
Sub StopCapture()
    If isLogging = True Then
    
        'キャプチャの取得状態を解除する
        isLogging = False
        
        'ESCキーへの登録を解除する
        Application.OnKey "{ESC}", ""
        
        'シート見出しの色を戻す
        ActiveSheet.Tab.Color = RGB(0, 0, 0)
        
        MsgBox "キャプチャの取得を停止しました。"
        
    End If
    
End Sub
-----
'トースト通知
$bodyText = 'ペースト処理が完了しました'

$ToastText01 = [Windows.UI.Notifications.ToastTemplateType, Windows.UI.Notifications, ContentType = WindowsRuntime]::ToastText01
$TemplateContent = [Windows.UI.Notifications.ToastNotificationManager, Windows.UI.Notifications, ContentType = WindowsRuntime]::GetTemplateContent($ToastText01)
$TemplateContent.SelectSingleNode('//text[@id="1"]').InnerText = $bodyText
$AppId = 'Microsoft.Office.EXCEL.EXE.15'
[Windows.UI.Notifications.ToastNotificationManager]::CreateToastNotifier($AppId).Show($TemplateContent)
----
' Psスクリプトの実行
Dim PWobj
Set PWobj = CreateObject("WScript.Shell")
PWobj.Run ("Powershell -ExecutionPolicy RemoteSigned -Command <Powershellスクリプト>, 0
----

ファイルサーバ検索システムを作る	https://aenomoto.hatenadiary.org/entry/20091227/1261932844
Internet archive	https://web.archive.org/web/20150417203113/https://hyperestraier.sourceforge.net/win/
Hyper Estraierのインストール	https://ebstudio.info/manual/KWIC/0_5_1_6_3.html
HyperEstraierを動かしてみる	https://qiita.com/ara-bot/items/ad413128d58ce9993c2c
windowsでHyper Estraierを用いた全文検索システムの構築	https://jetlaghtb.hatenablog.jp/entry/2015/05/26/220432
